#!/usr/bin/perl -w
# $Id: plot3d,v 1.5 2010-01-31 00:02:22 nick Exp $

use strict;
use Data::Dumper;

my ($filename, $interval) = @ARGV;
$interval = 1 if not defined $interval;
$interval *= 1_000_000;

open(my $fp, $filename) or die "can't open $filename";

$filename =~ s/\.log$//;
$filename =~ s/.*\///;

my $nodes = {};
my $route = {};

my $lasttime = 0;
my $nexttime = 0;
my $count = 0;

while (defined($_ = <$fp>)) {
	my ($t, $nn, $op, @rest) = split;
	next unless defined $t;

	die "TIME OUT OF JOINT AT LINE $. TIME $t\n" if $t < $lasttime;
	
	$lasttime = $t;
	$nexttime ||= $t;
	
	while ($t > $nexttime && $interval) {
		makeplot(sprintf('wrl/%s-%06d.wrl', $filename, $count), $nodes, $route);
		$nexttime += $interval;
		$count++;
	}

	if ($op eq 'Beacon') {
	    my ($stat, $x, $y, $z, @neigh) = @rest;
	    my @ne = ();
	    while (@neigh) {
	       my $n = shift @neigh;
	       my $s = shift @neigh;
               push @ne, $n if $s == 1;
	    }
	    $nodes->{$nn} = [ [ $x, $y, $z, $stat ], [ @ne ] ];
	} elsif ($op eq 'Route') {
	    my ($h1, $h2) = @rest;
	    if ($h1 && $h2) {
		$route->{$nn} = 2;
	    } elsif ($h1 || $h2) {
		$route->{$nn} = 1;
	    } else {
		$route->{$nn} = 0;
	    }
	}
	    
}
makeplot(sprintf('wrl/%s-%06d.wrl', $filename, $count), $nodes, $route);

close($fp);

##############################################################################

sub makeplot {
	my ($filename, $nodes, $route) = @_;

	print "Plotting $filename ... ", scalar keys %$nodes, " nodes\n";

 	open(my $fout, ">$filename");
	
	print $fout <<__EOF ;
#VRML V2.0 utf8
# plot3d

Background {
  groundColor [ 1 1 1 ]
  skyColor [ 1 1 1 ]
}

Viewpoint {
  position 0 0 1000
  orientation 0 0 1 0
}

DEF blackpaint Appearance {
  material Material {
    diffuseColor 0 0 0
    specularColor 0 0 0
  }
}

DEF bluepaint Appearance {
 material Material {
    diffuseColor 0 0 1
    specularColor 0 0 1
  }
}

DEF greenpaint Appearance {
 material Material {
    diffuseColor 0 1 0
    specularColor 0 1 0
  }
}

DEF redpaint Appearance {
 material Material {
    diffuseColor 1 0 0 
    specularColor 1 0 0
  }
}

DEF orangepaint Appearance {
 material Material {
    diffuseColor 1 0.5 0 
    specularColor 1 0.5 0
  }
}

DEF label FontStyle {
  size 18
  justify ["MIDDLE" "FIRST"]
  family ["SANS" "PLAIN"]
}

Shape {
  appearance USE blackpaint
  geometry IndexedLineSet {
    coord Coordinate {
      point [
__EOF

	
	my $nnum = 0;
	my %nnum;
	foreach my $n1 (sort { $a <=> $b } keys %$nodes) {
		my ($x, $y, $z) = @{$nodes->{$n1}[0]};
		print $fout "\t$x $y $z,\t# $nnum [$n1]\n";
		$nnum{$n1} = $nnum;
		$nnum++;
	}
	
	print $fout <<__EOF;
      ]
    }
    coordIndex [
__EOF

	foreach my $n1 (keys %$nodes) {
		my $nn1 = $nnum{$n1};
		next unless defined $nn1;
		
		my ($v1, $links) = @{$nodes->{$n1}};
		foreach my $n2 (@$links) {
			my $nn2 = $nnum{$n2};
			next unless defined $nn2;
			
			print $fout "\t$nn1, $nn2, -1,\t# [$n1 -> $n2]\n";	
		}
	}

	print $fout <<__EOF;
    ]
  }
}
__EOF

	my $whiteball = <<__EOF;
DEF whiteball Shape {
  appearance Appearance { } 
  geometry Sphere {
    radius 14
  }
}
__EOF

	foreach my $n1 (keys %$nodes) {
		my ($x, $y, $z, $stat) = @{$nodes->{$n1}[0]};
		my $paint;
		if ($stat != 2) {
			$paint = 'bluepaint';
		} elsif (not defined $route->{$n1}) {
			$paint = 'blackpaint';
		} elsif ($route->{$n1} == 2) {
			$paint = 'greenpaint';
		} elsif ($route->{$n1} == 1) {
			$paint = 'orangepaint';
		} else {
			$paint = 'redpaint';
		}
		print $fout <<__EOF;

Transform {  
  translation $x $y $z
  children [
    Billboard {
      children [
	Transform {
 	  translation 0 -7 15
	  children [
            Shape {
	      appearance USE $paint
              geometry Text {
    	        string [ "$n1" ]
	        fontStyle USE label
              }
	    }
          ]
        }
	$whiteball
      ]
      axisOfRotation 0 0 0
    }
  ]
}

__EOF
	$whiteball = "USE whiteball";
	}
}
