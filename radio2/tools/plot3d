#!/usr/bin/perl -w
# $Id: plot3d,v 1.4 2010-01-29 23:57:54 nick Exp $

use strict;
use Data::Dumper;

my ($filename, $interval) = @ARGV;
$interval = 1 if not defined $interval;
$interval *= 1_000_000;

open(my $fp, $filename) or die "can't open $filename";

$filename =~ s/\.log$//;
$filename =~ s/.*\///;

my $nodes = {};
my $hops = {};

my $lasttime = 0;
my $nexttime = 0;
my $count = 0;

while (defined($_ = <$fp>)) {
	my ($t, $nn, $op, @rest) = split;
	next unless defined $t;

	die "TIME OUT OF JOINT AT LINE $. TIME $t\n" if $t < $lasttime;
	
	$lasttime = $t;
	$nexttime ||= $t;
	
	while ($t > $nexttime && $interval) {
		makeplot(sprintf('wrl/%s-%06d.wrl', $filename, $count), $nodes, $hops);
		$nexttime += $interval;
		$count++;
	}

	if ($op eq 'Beacon') {
	    my ($stat, $x, $y, $z, @neigh) = @rest;
	    my @ne = ();
	    while (@neigh) {
	       my $n = shift @neigh;
	       my $s = shift @neigh;
               push @ne, $n if $s == 1;
	    }
	    $nodes->{$nn} = [ [ $x, $y, $z, $stat ], [ @ne ] ];
	} elsif ($op eq 'Route') {
	    my ($h1, $h2) = @rest;
	    $hops->{$nn} = ($h1 < $h2) ? $h1 : $h2;
	}
	    
}
makeplot(sprintf('wrl/%s-%06d.wrl', $filename, $count), $nodes, $hops);

close($fp);

##############################################################################

sub makeplot {
	my ($filename, $nodes, $hops) = @_;

	print "Plotting $filename ... ", scalar keys %$nodes, " nodes\n";

 	open(my $fout, ">$filename");
	
	print $fout <<__EOF ;
#VRML V2.0 utf8
# plot3d

Background {
  groundColor [ 1 1 1 ]
  skyColor [ 1 1 1 ]
}

Viewpoint {
  position 0 0 1000
  orientation 0 0 1 0
}

DEF hops0 Appearance {
  material Material {
    diffuseColor 0 0 0
    specularColor 0 0 0
  }
}

__EOF
	
	foreach my $h (1 .. 25) {
	    my $r = $h / 25;
	    my $g = 1 - $r;

	    print $fout <<__EOF;
DEF hops$h Appearance {
 material Material {
    diffuseColor $r $g 0
    specularColor $r $g 0
  }
}

__EOF
	}

	print $fout <<__EOF;

DEF label FontStyle {
  size 18
  justify ["MIDDLE" "FIRST"]
  family ["SANS" "PLAIN"]
}

Shape {
  appearance USE hops0
  geometry IndexedLineSet {
    coord Coordinate {
      point [
__EOF

	
	my $nnum = 0;
	my %nnum;
	foreach my $n1 (sort { $a <=> $b } keys %$nodes) {
		my ($x, $y, $z) = @{$nodes->{$n1}[0]};
		print $fout "\t$x $y $z,\t# $nnum [$n1]\n";
		$nnum{$n1} = $nnum;
		$nnum++;
	}
	
	print $fout <<__EOF;
      ]
    }
    coordIndex [
__EOF

	foreach my $n1 (keys %$nodes) {
		my $nn1 = $nnum{$n1};
		next unless defined $nn1;
		
		my ($v1, $links) = @{$nodes->{$n1}};
		foreach my $n2 (@$links) {
			my $nn2 = $nnum{$n2};
			next unless defined $nn2;
			
			print $fout "\t$nn1, $nn2, -1,\t# [$n1 -> $n2]\n";	
		}
	}

	print $fout <<__EOF;
    ]
  }
}
__EOF

	my $whiteball = <<__EOF;
DEF whiteball Shape {
  appearance Appearance { } 
  geometry Sphere {
    radius 14
  }
}
__EOF

	foreach my $n1 (keys %$nodes) {
		my ($x, $y, $z, $stat) = @{$nodes->{$n1}[0]};
		my $h = $hops->{$n1} || 0;
		print $fout <<__EOF;

Transform {  
  translation $x $y $z
  children [
    Billboard {
      children [
	Transform {
 	  translation 0 -7 15
	  children [
            Shape {
	      appearance USE hops$h
              geometry Text {
    	        string [ "$n1" ]
	        fontStyle USE label
              }
	    }
          ]
        }
	$whiteball
      ]
      axisOfRotation 0 0 0
    }
  ]
}

__EOF
	$whiteball = "USE whiteball";
	}
}
