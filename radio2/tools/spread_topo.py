#!/usr/bin/env python
# Topology generator by Nick Moore <nick@zoic.org>

import heapq
import random
from math import sqrt, pi, sin, cos, acos
from sys import argv, exit, stderr

# parameters

if len(argv) < 2:
    stderr.write("Usage: %s <nnodes> <nlinks> <rrange> <flags> <seed>\n" % argv[0]);
    exit(1)
    
nnodes = len(argv)>1 and int(argv[1]) or 400
minrange = len(argv)>2 and float(argv[2]) or 0
maxrange = len(argv)>3 and float(argv[3]) or 10
flags = len(argv)>4 and argv[4] or ""
seed = len(argv)>5 and argv[5] or None

random.seed(seed)

spherical = "S" in flags
minrange2 = minrange * minrange
maxrange2 = maxrange * maxrange

# nodes is a list of tuples (x,y)
nodes = [(0,0)]
links = []

while len(nodes) < nnodes:
    x = random.random()
    y = random.random()
    if spherical:
        x = x * 2 * pi
        y = acos( 2 * y - 1 )
    else:
	x = x * 1000
	y = y * 1000
    node1 = ( x, y)
    nlinks = []
    tooclose = False
    for m, node2 in enumerate(nodes):
        if spherical:
	        x1 = cos(node1[0])*sin(node1[1])
	        y1 = sin(node1[0])*sin(node1[1])
	        z1 = cos(node1[1])
	        x2 = cos(node2[0])*sin(node2[1])
	        y2 = sin(node2[0])*sin(node2[1])
	        z2 = cos(node2[1])
                dist2 = (x1-x2)**2 + (y1-y2)**2 + (z1-z2)**2
        else:
               dist2 = (node1[0]-node2[0])**2 + (node1[1]-node2[1])**2
        if dist2 < minrange2:
	    tooclose = True
	if dist2 < maxrange2:
	    nlinks.append((len(nodes), m))
    if not tooclose and nlinks:
	nodes.append((x,y))
	links += nlinks

print "# Generated by %s" % argv[0]
print "# Version $Id: spread_topo.py,v 1.1 2010-01-12 12:12:46 nick Exp $"
print "# NNODES %d" % len(nodes)
print "# NLINKS %d" % len(links)
print "# mean_degree %f" % (len(links) * 2.0 / len(nodes))
print "# MINRANGE %f" % minrange
print "# MAXRANGE %f" % maxrange
print "# flags %s" % flags
print "# seed %s" % seed

for n, m in links:
    print "%d\t%d\n%d\t%d" % (n,m,m,n) 
