#!/usr/bin/perl -w
# $Id: plotanim,v 1.5 2010-01-12 09:55:59 nick Exp $

use strict;
use Data::Dumper;

our $Revision = qw$Revision: 1.5 $[1];

my $nodes = {};

my $lasttime = 0;
my $nexttime = 0;
my $count = 0;

my ($st, $et);

while (<>) {
	my ($t, $nn, $op, $stat, $x, $y, $z, @ne) = split /\s+/;
	next unless defined $t;
	next unless $op eq 'Beacon';
	die "TIME OUT OF JOINT AT LINE $. TIME $t\n" if $t < $lasttime;
	
	print STDERR "." if int($t / 1000000) != int($lasttime / 1000000);
	
	$lasttime = $t;
	$nexttime ||= $t;
	
	push @{$nodes->{$nn}}, [ $t, $x, $y, $z ];

	$st ||= $t; $et = $t;

}

print STDERR scalar(keys %$nodes);
print STDERR "\n";


my $elapsed = ($et - $st) / 1000000;

my $zpos = 200 * sqrt(scalar keys %$nodes);

print << "__EOF" ;
#VRML V2.0 utf8
# Generated by plotanim $Revision

Viewpoint {
    position 0 0 $zpos
    orientation 0 0 1 0
}

DEF TIMER TimeSensor {
     loop TRUE
     cycleInterval $elapsed
}

__EOF

# Color to use for the balls.
my @cols = ( "1 0 0", "0 1 0", "1 0 1", "0 1 1", "1 1 0", "0.8 0.8 0.8", "0.5 0.5 1", "0.5 1 0", "1 0.5 0" );
my $cc = 0;

foreach my $nn (keys %$nodes) {
   my $col = $cols[$nn % @cols];
   
   print << "__EOF";
DEF NODE$nn Transform {
    translation 0 0 0
    children [
	Shape {
	    geometry Sphere { radius 7 }
	    appearance Appearance {
		material DEF NMAT$nn Material {
		    diffuseColor $col
		    specularColor 1 1 1
		    transparency 0.1
		}
	    }
	}
	Billboard {
	    children [
		Text {
		    string [ "$nn" ]
		    fontStyle FontStyle {
			size 20
			justify ["MIDDLE" "MIDDLE"]
		    }
		}
	    ]
	    axisOfRotation 0 0 0
	}
    ]
}

__EOF
}

foreach my $nn (keys %$nodes) {
    my $intk = "0";
    my $intv = "0 0 0";
    my ($ox, $oy, $oz) = (0,0,0);
    foreach my $n (@{$nodes->{$nn}}) {
	my ($t, $x, $y, $z) = @$n;
	my $pk = ($t - $st - 1) / ($et - $st);
	my $k = ($t - $st) / ($et - $st);
	if ($x != $ox || $y != $oy || $z != $oz) {
	    $intk .= "\n\t$pk\n\t$k";
	    $intv .= ",\n\t$ox $oy $oz,\n\t$x $y $z";
	    $ox = $x; $oy = $y; $oz = $z;
	}
    }
    #my $intk = join "\n\t", map { ($_->[0] - $st) / ($et - $st) } @{$nodes->{$nn}};
    #my $intv = join ",\n\t", map { join ' ', $_->[1], $_->[2], $_->[3] } @{$nodes->{$nn}};
    
    print << "__EOF";
DEF PATH$nn PositionInterpolator {
    key [
        $intk
    ]
    keyValue [
        $intv
    ]
}

ROUTE TIMER.fraction_changed TO PATH$nn.set_fraction
ROUTE PATH$nn.value_changed TO NODE$nn.translation

__EOF
}

print "# EOF\n";
